{
	"name": "PROVIDER_ENROLLMENT",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SRC_PROVIDER_ENROLLMENT",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable3",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Sink_Provider_Enrollment",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "providerenrollmentid"
				},
				{
					"name": "Lookup1"
				}
			],
			"script": "source(output(\n\t\tPROVIDERKEY as integer,\n\t\tPROVIDEREFFECTIVEDATE as string,\n\t\tPROVIDERTERMINATIONDATE as string,\n\t\tPAYERCODE as string,\n\t\tPRODUCTCODE as string,\n\t\tPLANCODE as string,\n\t\tBOARDCERTIFICATION as string,\n\t\tNETWORKFLAG as string,\n\t\tPROVIDERPANELCODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource(output(\n\t\tProvider_ID as integer,\n\t\tClient_Provider_ID as string,\n\t\tCMS_Provider_ID as string,\n\t\tUPIN as string,\n\t\tFull_Name as string,\n\t\tName_Prefix as string,\n\t\tFirst_Name as string,\n\t\tMiddle_Name as string,\n\t\tLast_Name as string,\n\t\tProfessional_Suffix as string,\n\t\tPROVIDER_TITLE as string,\n\t\tCompany_Name as string,\n\t\tEmail_Address as string,\n\t\tEmail_Usage_Type_Code as string,\n\t\tAddress_Line_1 as string,\n\t\tAddress_Line_2 as string,\n\t\tCity as string,\n\t\tCounty as string,\n\t\tState_Code as string,\n\t\tZip as string,\n\t\tPhone_Number_1 as string,\n\t\tPhone_Number_2 as string,\n\t\tPhone_Number_3 as string,\n\t\tFax_Number_1 as string,\n\t\tFax_Number_2 as string,\n\t\tFax_Number_3 as string,\n\t\tClient_Location_ID as string,\n\t\tLocation_Name as string,\n\t\tLocation_Usage_Type_Code as string,\n\t\tLocation_Contact_Full_Name as string,\n\t\tLocation_Contact_First_Name as string,\n\t\tLocation_Contact_Last_Name as string,\n\t\tProvider_Location_Effective_Date as date,\n\t\tProvider_Location_Termination_Date as date,\n\t\tUsage_Preference_Code as string,\n\t\tNPI as string,\n\t\tDEA_Number as string,\n\t\tTIN as string,\n\t\tTIMELY_FILING_LIMIT as string,\n\t\tSSN as string,\n\t\tProvider_Effective_Date as string,\n\t\tProvider_Termination_Date as string,\n\t\tNetwork_Ind as string,\n\t\tFacility_Code as string,\n\t\tManagement_Group_Code as string,\n\t\tPrimary_Language_Code as string,\n\t\tLocation_Key as string,\n\t\tExclude_From_MR_Chase as string,\n\t\tExclude_From_PR_Relationship as string,\n\t\tSource_System_Of_Record as string,\n\t\tMedicare_Facility_Number as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source2\nsource1 keyGenerate(output(Provider_Enrollment_Id as long),\n\tstartAt: 1L) ~> providerenrollmentid\nproviderenrollmentid, source2 lookup(PROVIDERKEY == Provider_ID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 sink(input(\n\t\tProvider_Enrolment_Id as integer,\n\t\tProvider_KEY as string,\n\t\tProvider_Effective_Date as date,\n\t\tProvider_Termination_Date as date,\n\t\tProvider_Product_Code as string,\n\t\tProvider_PayerCode as string,\n\t\tBoard_Certification as string,\n\t\tNetwork_Flag as string,\n\t\tProvider_PanelCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tProvider_Enrolment_Id = Provider_Enrollment_Id,\n\t\tProvider_KEY = PROVIDERKEY,\n\t\tProvider_Effective_Date = PROVIDEREFFECTIVEDATE,\n\t\tProvider_Termination_Date = PROVIDERTERMINATIONDATE,\n\t\tProvider_Product_Code = PRODUCTCODE,\n\t\tProvider_PayerCode = PAYERCODE,\n\t\tBoard_Certification = BOARDCERTIFICATION,\n\t\tNetwork_Flag = NETWORKFLAG,\n\t\tProvider_PanelCode = PROVIDERPANELCODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
		}
	}
}